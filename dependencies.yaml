---
- name: Dependencies | Ensure crio_version has a 'v' prefix
  set_fact:
    crio_version: "{{ crio_version if crio_version | regex_search('^v') else 'v' + crio_version }}"

- name: Dependencies | Ensure crio_version has a 'v' prefix
  set_fact:
    kubernetes_version: "{{ kubernetes_version if kubernetes_version | regex_search('^v') else 'v' + kubernetes_version }}"

- name: Dependencies | Add Kubernetes repository
  ansible.builtin.yum_repository:
    name: kubernetes
    description: Kubernetes Repository
    baseurl: "https://pkgs.k8s.io/core:/stable:/{{ kubernetes_version }}/rpm/"
    gpgkey: "https://pkgs.k8s.io/core:/stable:/{{ kubernetes_version }}/rpm/repodata/repomd.xml.key"
    enabled: true
    gpgcheck: false

# - name: Dependencies | Remote RPM install with yum
#   ansible.builtin.yum: 
#     name: http://example.com/some_package.rpm
#     state: present

- name: Dependencies | Add cri-o repository
  ansible.builtin.yum_repository:
    name: cri-o
    description: Cri-o Repository
    baseurl: "https://pkgs.k8s.io/addons:/cri-o:/stable:/{{ crio_version }}/rpm/"
    gpgkey: "https://pkgs.k8s.io/addons:/cri-o:/stable:/{{ crio_version }}/rpm/repodata/repomd.xml.key"
    enabled: true
    gpgcheck: false

- name: Dependencies | Install cri-o, kubeadm, kubelet, kubectl
  ansible.builtin.yum:
    name:
      - cri-o
      - kubeadm
      - kubelet
      - kubectl
    state: present

- name: Dependencies | Configure crio conf
  block:
    - name: Dependencies | Check if [crio.image] section exists
      ansible.builtin.command: grep -q '^\[crio.image\]' "{{ crio_config_file_path }}"
      register: crio_image_section_check
      failed_when: false

    - name: Dependencies | Insert pause_image line if [crio.image] section exists
      ansible.builtin.lineinfile:
        path: "{{ crio_config_file_path }}"
        regexp: 'pause_image\s*='
        line: 'pause_image = "{{ pause_image }}"'
        insertafter: '^\[crio.image\]'
      when:
        - crio_image_section_check.rc == 0

    - name: Dependencies | Insert [crio.image] section and pause_image line if [crio.image] section does not exist
      ansible.builtin.blockinfile:
        path: "{{ crio_config_file_path }}"
        block: |
          [crio.image]
          pause_image = "{{ pause_image }}"
        insertafter: BOF
      when:
        - crio_image_section_check.rc != 0

- name: Dependencies | Delete /24 subnets
  block:
    - name: Dependencies | Remove the subnet lines with /24 mask
      ansible.builtin.replace:
        path: "{{ crio_subnet_config_path }}"
        regexp: ',\n\s*\[{ "subnet": "10\.\d{1,3}\.\d{1,3}\.\d{1,3}/24" }\],?'
        replace: ''

- name: Dependencies | Enable cri-o and kubelet services
  ansible.builtin.systemd:
    name: "{{ item }}"
    enabled: true
  loop:
    - crio
    - kubelet

- name: Dependencies | Load br_netfilter module
  ansible.builtin.command: modprobe br_netfilter

- name: Dependencies | Ensure net.ipv4.ip_forward is set in sysctl.conf
  ansible.builtin.lineinfile:
    path: /etc/sysctl.conf
    line: '{{ item }}'
    state: present
  loop:
    - 'net.ipv4.ip_forward=1'
    - 'net.bridge.bridge-nf-call-ip6tables=1'
    - 'fs.may_detach_mounts=1'

- name: Dependencies | Applying
  ansible.builtin.command: sysctl -p

- name: Dependencies | Turn off all swap spaces
  ansible.builtin.command: swapoff -a

- name: Dependencies | Remove swap entries from /etc/fstab
  ansible.builtin.lineinfile:
    path: /etc/fstab
    regexp: '^\s*[^#].*\s+swap\s+'
    state: absent
    backup: true

- name: Dependencies | Ensure swap is disabled in the current session
  ansible.builtin.command: free -m
  register: free_output

- name: Dependencies | Display current swap status
  ansible.builtin.debug:
    msg: "{{ free_output.stdout_lines }}"

- name: Dependencies | Reload systemd manager configuration
  ansible.builtin.command: systemctl daemon-reload

- name: Dependencies | Remount all filesystems
  ansible.builtin.command: mount -a

- name: Dependencies | Create /var/lib/containers directory
  ansible.builtin.file:
    path: /var/lib/containers
    state: directory
    mode: '0755'
    owner: root
    group: root

- name: Dependencies | Ensure CRI-O service is started
  ansible.builtin.systemd:
    name: crio
    state: started
